import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import { default as Web3 } from 'web3';


class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      symtomps: "",
      diagnosis: "",
      treatment: "",
      count: null,
      patientCode: "",
      patientContract: window.web3.eth.contract([
        {
          "constant": false,
          "inputs": [
            {
              "name": "symptoms",
              "type": "string"
            },
            {
              "name": "diagnosis",
              "type": "string"
            },
            {
              "name": "treatment",
              "type": "string"
            }
          ],
          "name": "createProfile",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "count",
          "outputs": [
            {
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "getLatestRecord",
          "outputs": [
            {
              "name": "",
              "type": "string"
            },
            {
              "name": "",
              "type": "string"
            },
            {
              "name": "",
              "type": "string"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "getList",
          "outputs": [
            {
              "components": [
                {
                  "name": "symptoms",
                  "type": "string"
                },
                {
                  "name": "diagnosis",
                  "type": "string"
                },
                {
                  "name": "treatment",
                  "type": "string"
                }
              ],
              "name": "",
              "type": "tuple[]"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "getOriginRecord",
          "outputs": [
            {
              "name": "",
              "type": "string"
            },
            {
              "name": "",
              "type": "string"
            },
            {
              "name": "",
              "type": "string"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "getRecord",
          "outputs": [
            {
              "name": "",
              "type": "string"
            },
            {
              "name": "",
              "type": "string"
            },
            {
              "name": "",
              "type": "string"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "medicalRecords",
          "outputs": [
            {
              "name": "symptoms",
              "type": "string"
            },
            {
              "name": "diagnosis",
              "type": "string"
            },
            {
              "name": "treatment",
              "type": "string"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        }
      ]),
      patientContractInstance: null,
      account: ""
    }
    this.createContract = this.createContract.bind(this);
    this.handleNameChange = this.handleNameChange.bind(this);
    this.handleAgeChange = this.handleAgeChange.bind(this);
    this.handleSymtompsChange = this.handleSymtompsChange.bind(this);
    this.handleTreatmentChange = this.handleTreatmentChange.bind(this);
    this.handleDiagnosisChange = this.handleDiagnosisChange.bind(this);
    this.handleRecordCountChange = this.handleRecordCountChange.bind(this);
  }

  updateAccount = (accs) => {
    this.setState({ account: accs[0]});
    window.web3.eth.defaultAccount = this.state.account;
  }


  componentDidMount() {
   
     window.web3.eth.getAccounts((err, accs) => {
      if (err != null) {
        alert("There was an error fetching your accounts.");
        return;
      }

      if (accs.length == 0) {
        alert("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
        return;
      }
      this.updateAccount(accs)

    });
  
  }

  handleNameChange (event) {
    this.setState ({ name: event.target.value});
  }

  handleAgeChange (event) {
    this.setState ({ age: event.target.value});
  }

  handleSymtompsChange (event) {
    this.setState ({ symtomps: event.target.value});
  }

  handleTreatmentChange (event) {
    this.setState ({ treatment: event.target.value});
  }

  handleDiagnosisChange (event) {
    this.setState ({ diagnosis: event.target.value});
  }

  handleRecordCountChange (event) {
    this.setState ({ count: event.target.value});
  }

 
  createContract() {
    // var message = document.getElementById('message');
    // message.innerText = 'attempting new contract...';
    var patient = this.state.patientContract.new(
      {
        from: this.state.account,
        data: this.state.patientCode,
        gas: '4700000'
      }, function (e, contract) {
        console.log(e, contract);
        if (typeof contract.address !== 'undefined') {
          console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
          document.getElementById('contractAddress').value = contract.address;
        }
      })
  };


  addNewRecord = () => {

    var contractAddress = document.getElementById('contractAddress').value.toString();
    var deployedPatient = this.state.patientContract.at(contractAddress);

    deployedPatient.createProfile(this.state.symtomps, this.state.diagnosis, this.state.treatment, function (error,result) {
      if (error) {
        console.error(error);
        return;
      }
      console.log("Result is: ", result);
    });
  }

  getMedicalRecord = () => {

    var contractAddress = document.getElementById('contractAddress').value.toString();
    var deployedPatient = this.state.patientContract.at(contractAddress);

    deployedPatient.getRecord(this.state.count, function (error,result) {
      if (error) {
        console.error(error);
        return;
      }
      console.log("Result is: ", result);
    });
  }

  getLatestMedicalRecord = () => {

    var contractAddress = document.getElementById('contractAddress').value.toString();
    var deployedPatient = this.state.patientContract.at(contractAddress);

    deployedPatient.getLatestRecord(function (error,result) {
      if (error) {
        console.error(error);
        return;
      }
      console.log("Result is: ", result);
    });
  }

  getListofRecord = () => {
    var contractAddress = document.getElementById('contractAddress').value.toString();
    var deployedPatient = this.state.patientContract.at(contractAddress);

    deployedPatient.getList(function (error,result) {
      if (error) {
        console.error(error);
        return;
      }
      console.log("Result is: ", window.web3.toAscii(result));
    });

  }

  render() {
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <h1 className="App-title">Welcome to React</h1>
        </header>
        <br /> <label htmlFor="contractAddress">Contract Address:</label> <input type="text" id="contractAddress" placeholder="Scan address or create a new contract"></input>
        <br />
        <br />
        <br />
        <button onClick={this.createContract}> Create new Patient </button>
        <br/>
        <br/>
        <form>
          <input 
            type="text" 
            name="symtomps" 
            placeholder="Enter new symtomps ..."
            value={this.state.symtomps}
            onChange={ this.handleSymtompsChange }/>
          <input 
            type="text" 
            name="diagnosis" 
            placeholder="Enter new diagnosis ..."
            value={this.state.diagnosis}
            onChange={ this.handleDiagnosisChange }/>
          <input 
            type="text" 
            name="treatment" 
            placeholder="Enter new treatment ..."
            value={this.state.treatment}
            onChange={ this.handleTreatmentChange }/>
        </form>
        <button onClick={this.addNewRecord}> Add new record ... </button>
        <form>
          <input 
            type="text" 
            name="count"
            onChange={ this.handleRecordCountChange }/>
        </form>
        <button onClick={this.getMedicalRecord}> Get record ... </button>
        <button onClick={this.getLatestMedicalRecord}> Get latest record ... </button>
        <button onClick={this.getListofRecord}> Get list record ... </button>
      </div>
    );
  }
}

export default App;
